# Generated by Django 3.0.8 on 2020-07-26 20:20

import datetime
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_name', models.CharField(max_length=240, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameCategories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_category', models.CharField(max_length=240, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_name', models.CharField(max_length=240, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_creation_date', models.DateField(default=datetime.date.today)),
                ('match_end_date', models.DateField(default=None, null=True)),
                ('match_status', models.CharField(default='created', max_length=120)),
                ('match_comment', models.CharField(blank=True, max_length=480)),
                ('bet_value', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('10.00'))])),
                ('mc_result', models.CharField(blank=True, choices=[(None, 'Informe o resultado da partida: '), ('WIN', 'Ganhei'), ('DRAW', 'Empatamos'), ('LOSE', 'Perdi')], default='', max_length=24)),
                ('mc_main_statistic', models.CharField(default=None, max_length=120, null=True)),
                ('mc_opp_main_statistic', models.CharField(default=None, max_length=120, null=True)),
                ('mc_print', models.ImageField(default=None, null=True, upload_to='matches_results/')),
                ('opp_result', models.CharField(blank=True, choices=[(None, 'Informe o resultado da partida: '), ('WIN', 'Ganhei'), ('DRAW', 'Empatamos'), ('LOSE', 'Perdi')], default='', max_length=24)),
                ('opp_main_statistic', models.CharField(default=None, max_length=120, null=True)),
                ('opp_mc_main_statistic', models.CharField(default=None, max_length=120, null=True)),
                ('opp_print', models.ImageField(default=None, null=True, upload_to='matches_results/')),
                ('match_winner', models.CharField(blank=True, choices=[(None, 'Informe o resultado da partida: '), ('WIN', 'Ganhei'), ('DRAW', 'Empatamos'), ('LOSE', 'Perdi')], default='', max_length=24)),
                ('match_mc_main_statistic', models.CharField(default=None, max_length=120, null=True)),
                ('match_opp_main_statistic', models.CharField(default=None, max_length=120, null=True)),
                ('game_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.Game')),
                ('match_creator', models.ManyToManyField(related_name='match_creator', to=settings.AUTH_USER_MODEL)),
                ('opponent', models.ManyToManyField(related_name='opponent', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GameSubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_subcategory', models.CharField(max_length=240, unique=True)),
                ('game_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.GameCategories')),
            ],
        ),
        migrations.CreateModel(
            name='GameSeries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_series', models.CharField(max_length=240, unique=True)),
                ('game_subcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.GameSubCategory')),
            ],
        ),
        migrations.CreateModel(
            name='GameRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule_01', models.CharField(default=None, max_length=240, null=True)),
                ('rule_02', models.CharField(default=None, max_length=240, null=True)),
                ('rule_03', models.CharField(default=None, max_length=240, null=True)),
                ('game_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.Game')),
            ],
        ),
        migrations.CreateModel(
            name='GameMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_mode_01', models.CharField(default=None, max_length=240, null=True)),
                ('game_mode_02', models.CharField(default=None, max_length=240, null=True)),
                ('game_mode_03', models.CharField(default=None, max_length=240, null=True)),
                ('game_mode_04', models.CharField(default=None, max_length=240, null=True)),
                ('game_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.Game')),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='game_series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.GameSeries'),
        ),
        migrations.AddField(
            model_name='game',
            name='platform',
            field=models.ManyToManyField(to='matches.Platform'),
        ),
    ]
